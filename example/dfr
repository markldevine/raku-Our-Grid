#!/usr/bin/env raku

use lib '/home/mdevine/github.com/raku-Our-Grid/lib';

use Async::Command::Multi;
use Our::Grid;
use Our::Grid::Cell;
use Our::Utilities;

use Grammar::Debugger;
use Data::Dump::Tree;

my @aix-servers             = ();
my @aix-serversX            = <
                                isplc02.wmata.com
                                isplc01.wmata.com
                                p595nimctf.wmata.com
                                caappsdev09.wmata.com
                                caappsdev07.wmata.com
                                caappsdev10.wmata.com
                                caappsdev04.wmata.com
                                caappsdev01.wmata.com
                                caappsdev02.wmata.com
                                caappsdev03.wmata.com
                                caappsdev08.wmata.com
                                caappsdev05.wmata.com
                                caappsdev06.wmata.com
                                caappsdev12.wmata.com
                                caapfaredev02.wmata.com
                                cadbcgndev01.wmata.com
                                caapfaredev01.wmata.com
                                cadbfaredev01.wmata.com
                                p595b32.wmata.com
                                cadbiamdev01.wmata.com
                                cadbtrpdr01.wmata.com
                                cadbbusdr10.wmata.com
                                cadbcgndr01.wmata.com
                                cadbmaxprd03.wmata.com
                                caappsprd01.wmata.com
                                caappsprd02.wmata.com
                                caappsprd03.wmata.com
                                cadbpsdr01.wmata.com
                                cadbpsdr02.wmata.com
                                p595a27.wmata.com
                                caappsdev11.wmata.com
                                p595a14.wmata.com
                                cadbfaredr21.wmata.com
                                caappsprd04.wmata.com
                                caappsprd05.wmata.com
                                caappsprd06.wmata.com
                                p770a11.wmata.com
                                jaapfareprd12.wmata.com
                                aixtest.wmata.com
                                p650nimjgb.wmata.com
                                jaappsprd03.wmata.com
                                jaappsprd04.wmata.com
                                jaappsprd05.wmata.com
                                jaappsprd06.wmata.com
                                jaappsprd01.wmata.com
                                p770adoc3.wmata.com
                                p770a21.wmata.com
                                p770a12.wmata.com
                                p770c11.wmata.com
                                jaappsprd07.wmata.com
                                p595b14.wmata.com
                            >;

my %server-results;
my @aix-filesystems         = </ /usr /var /tmp /home /opt /var/adm/ras/livedump /nmon /wmata /audit /admin>;
my @linux-filesystems       = </ /usr /var /tmp /home /opt>;

class df-Pk {
    has Str $.filesystem;
    has Str $.total-KBS;
    has Str $.used-KBs;
    has Str $.available-KBs;
    has Str $.capacity;
    has Int $.cap-percent-num;
    has Str $.mount-point;
}

grammar df-Pk-grammar {
    token TOP {
        ^
        Filesystem \s+ 1024 '-' blocks \s+ Used \s+ Available \s+ Capacity \s+ Mounted \s+ on $$
        <df-data-record>+
        $
    }
    token df-data-record {
        \n ^^ <filesystem> \s+ <total-KBS> \s+ <used-KBs> \s+ <available-KBs> \s+ <capacity> \s+ <mount-point> $$
    }
    token filesystem        { <[-\.:/_\w]>+             }
    token total-KBS         { '-' || \d+                }
    token used-KBs          { '-' || \d+                }
    token available-KBs     { '-' || \d+                }
    token capacity          { '-' || <capacity-percent> }
    token capacity-percent  { <cap-percent-num> '%'     }
    token cap-percent-num   { \d+                       }
    token mount-point       { <[-\.:/_\w]>+             }
}

class df-Pk-actions {
    has $.server        is required;

    method df-data-record ($/) {
        %server-results{$!server}.push: 
            my $cap-percent-num     = 0;
            if $/<capacity><capacity-percent><capacity-percent-num>:exists {
                $cap-percent-num    = +$/<capacity><capacity-percent><cap-percent-num>;
            }
            df-Pk.new:
                        :filesystem(~$/<filesystem>),
                        :total-KBS(~$/<total-KBS>),
                        :used-KBs(~$/<used-KBs>),
                        :available-KBs(~$/<available-KBs>),
                        :capacity(~$/<capacity>),
                        :cap-percent-num($cap-percent-num),
                        :mount-point(~$/<mount-point>),
            ;
    }
}

sub MAIN (
    Str     :$aix,          #= AIX server name(s) (comma separated list)
    Str     :$linux,        #= Linux server name(s) (comma separated list)
    Bool    :$text,         #= TEXT print
    Int     :$above,        #= only display file systesm above the percentage 
    Bool    :$light-mode,   #= reverse header highlight for light-mode
    Bool    :$csv-print,    #= dump CSV to STDOUT
    Bool    :$html-print,   #= dump HTML to STDOUT
    Bool    :$json-print,   #= dump JSON to STDOUT
    Bool    :$xml-print,    #= dump XML to STDOUT
) {
    @aix-servers            = $aix.split(',')   if $aix;
    my @linux-servers;
    @linux-servers          = $linux.split(',') if $linux;
    my %command;
    if @aix-servers.elems || @linux-servers.elems {
        if @aix-servers.elems {
            for @aix-servers -> $aix {
                %command{$aix}      = ['ssh', $aix, '/usr/bin/df', '-Pk'];
#               %command{$aix}.append: @aix-filesystems;
            }
        }
        if @linux-servers.elems {
            for @linux-servers -> $linux {
                %command{$linux}    = ['ssh', '-o', 'StrictHostKeyChecking=accept-new', $linux, '/usr/bin/df', '-Pk'];
#               %command{$linux}.append: @linux-filesystems;
            }
        }
    }
    else {
        $*ERR.put: $*USAGE;
        exit 1;
    }
    my $command-manager = Async::Command::Multi.new(:%command, :2time-out, :4batch);
    $command-manager.sow;
    my %results = $command-manager.reap;
    for %results.keys.sort -> $server {
        df-Pk-grammar.parse(%results{$server}.stdout-results, :actions(df-Pk-actions.new(:$server))) || die "Failed parsing of: \n\n" ~ %results{$server}.stdout-results.head;
    }
    my Our::Grid    $grid  .= new: :title('df Report'), :reverse-highlight($light-mode);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('System'))),     :0col);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('Filesystem'))), :1col);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('Total'))),      :2col);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('Used'))),       :3col);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('Available'))),  :4col);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('% Used'))),     :5col);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('Mount Point'))),:6col);
    for %server-results.keys.sort -> $server {
        for %server-results{$server}.list -> $df-record {
            next if $above && $df-record.cap-per-used-num <= $above;
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($server), :bold)), :row);
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.filesystem))));
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.total-KBS * 1024),            :justification(justify-right),  :bytes-to-bytes-unit)));
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.used-KBs * 1024),             :justification(justify-right),  :bytes-to-bytes-unit)));
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.available-KBs * 1024),        :justification(justify-right),  :bytes-to-bytes-unit)));
            if 80 <= $df-record.cap-per-used-num < 90 {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity-percent-used),   :justification(justify-right),  :foreground(orange))));
            }
            elsif 90 <= $df-record.cap-per-used-num < 100 {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity-percent-used),   :justification(justify-right),  :foreground(red))));
            }
            elsif $df-record.cap-per-used-num == 100 {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity-percent-used),   :justification(justify-right),  :foreground(red), :blink)));
            }
            else {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity-percent-used),   :justification(justify-right))));
            }
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.mount-point),                 :justification(justify-left))));
        }
    }
    if any($text.so, $csv-print.so, $html-print.so, $json-print.so, $xml-print.so) {
        when $text          { $grid.TEXT-print; proceed; }
        when $csv-print     { $grid.csv-print;  proceed; }
        when $html-print    { $grid.html-print; proceed; }
        when $json-print    { $grid.json-print; proceed; }
        when $xml-print     { $grid.xml-print;  proceed; }
    }
    else {
        $grid.ANSI-print;
    }
}

=finish

    if $text {
        $grid.TEXT-print;
    }
    elsif $output-csv {
        $grid.output-csv;
    }
    elsif $output-html {
        $grid.output-html;
    }
    elsif $output-json {
        $grid.output-json;
    }
    elsif $output-xml {
        $grid.output-xml;
    }
    else {
        $grid.ANSI-print;
    }
