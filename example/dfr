#!/usr/bin/env raku

#use lib '/home/mdevine/github.com/raku-Our-Utilities/lib';
use lib '/home/mdevine/github.com/raku-Our-Grid/lib';
#use lib '/home/mdevine/github.com/raku-Our-Redis/lib';

#use Data::Dump::Tree;
use Async::Command::Multi;
use Our::Cache;
use Our::Grid;
use Our::Grid::Cell;
use Our::Utilities;
use JSON::Fast;
#use Grammar::Debugger;

my %server-results;

class df-Pk {
    has Str $.filesystem;
    has     $.total-bytes;
    has     $.used-bytes;
    has     $.available-bytes;
    has Str $.capacity;
    has Int $.cap-percent-num;
    has Str $.mount-point;
}

grammar df-Pk-grammar {
    token TOP {
        ^
        Filesystem \s+ 1024 '-' blocks \s+ Used \s+ Available \s+ Capacity \s+ Mounted \s+ on $$
        <df-data-record>+
        $
    }
    token df-data-record {
        \n ^^ <filesystem> \s+ <total-KBs> \s+ <used-KBs> \s+ <available-KBs> \s+ <capacity> \s+ <mount-point> $$
    }
    token filesystem        { <[-\\\.:/_\w]>+               }
    token total-KBs         { '-' || <total-KBs-num>        }
    token total-KBs-num     { \d+                           }
    token used-KBs          { '-' || <used-KBs-num>         }
    token used-KBs-num      { \d+                           }
    token available-KBs     { '-' || <available-KBs-num>    }
    token available-KBs-num { \d+                           }
    token capacity          { '-' || <capacity-percent>     }
    token capacity-percent  { <cap-percent-num> '%'         }
    token cap-percent-num   { \d+                           }
    token mount-point       { <[-\.:/_\w]>+                 }
}

class df-Pk-actions {
    has $.server        is required;

    method df-data-record ($/) {
        my $total-bytes         = '-';
        if $/<total-KBs><total-KBs-num>:exists {
            $total-bytes        = +$/<total-KBs><total-KBs-num> * 1024;
        }
        my $used-bytes          = '-';
        if $/<used-KBs><used-KBs-num>:exists {
            $used-bytes         = +$/<used-KBs><used-KBs-num> * 1024;
        }
        my $available-bytes     = '-';
        if $/<available-KBs><available-KBs-num>:exists {
            $available-bytes    = +$/<available-KBs><available-KBs-num> * 1024;
        }
        my $cap-percent-num     = 0;
        if $/<capacity><capacity-percent><cap-percent-num>:exists {
            $cap-percent-num    = +$/<capacity><capacity-percent><cap-percent-num>;
        }
        %server-results{$!server}.push: 
            df-Pk.new:
                        :filesystem(~$/<filesystem>),
                        :$total-bytes,
                        :$used-bytes,
                        :$available-bytes,
                        :capacity(~$/<capacity>),
                        :$cap-percent-num,
                        :mount-point(~$/<mount-point>),
            ;
    }
}

constant    $default-server = '127.0.0.1';

sub MAIN (
    Str                 $servers            = $default-server,  #= server name(s) (comma separated list)
    Int                 :$percent-above     = -1,               #= only display file systems above the percentage 
    Bool                :$csv,                                  #= dump CSV to STDOUT
    Bool                :$gui,                                  #= Graphical User Interface
    Bool                :$html,                                 #= dump HTML to STDOUT
    Bool                :$json,                                 #= dump JSON to STDOUT
#   Grid-Email-Formats  :$mail-body-format,                     #= email body format
                        :$mail-body-format,                     #= email body format
                        :$mail-from,                            #= email 'From:' addressee
                        :@mail-to,                              #= accumulate email 'To:' addressees
                        :@mail-cc           = (),               #= accumulate email 'Cc:' addressees
                        :@mail-bcc          = (),               #= accumulate email 'Bcc:' addressees
    Bool                :$text,                                 #= TEXT print
    Bool                :$tui,                                  #= Terminal User Interface
    Bool                :$xml,                                  #= dump XML to STDOUT
    Bool                :$light-mode,                           #= reverse header highlight for light-mode
    Int                 :$sort-columns,                         #= sort by column number(s)
    Bool                :$sort-descending,                      #= sort in descending order
) {
    my Bool $mailing;
    my $from                = $mail-from;
    my $format              = $mail-body-format;
    if $mail-from && @mail-to.elems {
        die '--mail-from=<email-address> required to send mail!' unless $mail-from;
        die '--mail-to=<email-address[,email-address]> required to send mail!' unless @mail-to.elems;
        $from               = $mail-from[0] if $mail-from ~~ Array;
        $format             = $mail-body-format[0] if $mail-body-format ~~ Array;
        $mailing = True;
    }
    my $reverse-highlight   = $light-mode ?? True !! False;
    my $preferences-cache-file-name = cache-file-name(:meta<preferences>);
    my $preferences-cache   = cache(:cache-file-name($preferences-cache-file-name));
    $preferences-cache      = from-json($preferences-cache) if $preferences-cache;
    without $light-mode {
        $reverse-highlight  = $preferences-cache<light-mode> if $preferences-cache<light-mode>:exists;
    }
    cache(:cache-file-name($preferences-cache-file-name), :data(to-json({light-mode => $reverse-highlight})));
    my @servers             = $servers.split(',');
    my %command;
    for @servers -> $server {
        if $server eq $default-server {
            %command{$server}   = ['/usr/bin/df', '-Pk'];
        }
        else {
            %command{$server}   = ['ssh', $server, '/usr/bin/df', '-Pk'];
        }
    }
    my $command-manager = Async::Command::Multi.new(:%command, :20time-out, :8batch);
    $command-manager.sow;
    my %results = $command-manager.reap;
    for %results.keys.sort -> $server {
        df-Pk-grammar.parse(%results{$server}.stdout-results.trim, :actions(df-Pk-actions.new(:$server))) || warn "Failed parsing of ($server): \n\n|" ~ %results{$server}.stdout-results ~ '|';
    }
    my Our::Grid    $grid  .= new: :$reverse-highlight;
    $grid.add-heading('System',         :justification<left>),
    $grid.add-heading('Filesystem',     :justification<left>);
    $grid.add-heading('Total',          :justification<right>);
    $grid.add-heading('Used',           :justification<right>);
    $grid.add-heading('Available',      :justification<right>);
    $grid.add-heading('% Used',         :justification<right>);
    $grid.add-heading('Mount Point',    :justification<left>);
    for %server-results.keys.sort -> $server {
        for %server-results{$server}.list -> $df-record {
            next if $df-record.cap-percent-num <= $percent-above;
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($server), :bold)));
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.filesystem),      :justification<left>)));
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.total-bytes),     :justification<right>,  :bytes-to-bytes-unit)));
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.used-bytes),      :justification<right>,  :bytes-to-bytes-unit)));
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.available-bytes), :justification<right>,  :bytes-to-bytes-unit)));
            if 70 <= $df-record.cap-percent-num < 80 {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity),    :justification<right>,  :foreground<yellow>)));
            }
            elsif 80 <= $df-record.cap-percent-num < 90 {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity),    :justification<right>,  :foreground<orange>)));
            }
            elsif 90 <= $df-record.cap-percent-num < 100 {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity),    :justification<right>,  :foreground<red>)));
            }
            elsif $df-record.cap-percent-num == 100 {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity),    :justification<right>,  :foreground<red>, :blink)));
            }
            else {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity),    :justification<right>)));
            }
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.mount-point),     :justification<left>)));
            $grid.current-row++;
        }
    }
    if $sort-columns {
        my @sort-columns = $sort-columns.split: ',';
        $grid.sort-by-columns(:@sort-columns, :descending($sort-descending));
    }
    {
        when $text          {   $grid.TEXT-print; }
        when $html          {   $grid.HTML-print; }
        when $csv           {   $grid.CSV-print;  }
        when $json          {   $grid.JSON-print; }
        when $mailing       {
                                $grid.send-proxy-mail-via-redis(
                                    :cro-host<127.0.0.1>,
                                    :22151cro-port,
                                    :mail-from($from),
                                    :@mail-to,
                                    :@mail-cc,
                                    :@mail-bcc,
                                    :$format,
                                );
        }
        when $xml           {   $grid.XML-print;  }
        when $tui           {   $grid.TUI;        }
        when $gui           {   $grid.GUI;        }
        default             {   $grid.ANSI-print; }
    }
}

=finish
