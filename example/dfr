#!/usr/bin/env raku

use lib '/home/mdevine/github.com/raku-Our-Grid/lib';

use Async::Command::Multi;
use Our::Grid;
use Our::Grid::Cell;
use Our::Utilities;
#use Grammar::Debugger;

use Data::Dump::Tree;

my %server-results;
my @aix-filesystems         = </ /usr /var /tmp /home /opt /var/adm/ras/livedump /nmon /wmata /audit /admin>;
my @linux-filesystems       = </ /usr /var /tmp /home /opt>;

class df-Pk {
    has Str $.filesystem;
    has Int $.total-KBS;
    has Int $.used-KBs;
    has Int $.available-KBs;
    has Str $.capacity-percent-used;
    has Int $.cap-per-used-num;
    has Str $.mount-point;
}

grammar df-Pk-grammar {
    token TOP {
        ^
        Filesystem \s+ 1024 '-' blocks \s+ Used \s+ Available \s+ Capacity \s+ Mounted \s+ on $$
        <df-data-record>+
        $
    }
    token df-data-record {
        \n ^^ <filesystem> \s+ <total-KBS> \s+ <used-KBs> \s+ <available-KBs> \s+ <capacity-percent-used> \s+ <mount-point> $$
    }
    token filesystem            { <[/\w]>+                  }
    token total-KBS             { \d+                       }
    token used-KBs              { \d+                       }
    token available-KBs         { \d+                       }
    token capacity-percent-used { <cap-per-used-num> '%'    }
    token cap-per-used-num      { \d+                       }
    token mount-point           { <[/\w]>+                  }
}

class df-Pk-actions {
    has $.server        is required;

    method df-data-record ($/) {
        %server-results{$!server}.push: 
            df-Pk.new:
                        :filesystem(~$/<filesystem>),
                        :total-KBS(+$/<total-KBS>),
                        :used-KBs(+$/<used-KBs>),
                        :available-KBs(+$/<available-KBs>),
                        :capacity-percent-used(~$/<capacity-percent-used>),
                        :cap-per-used-num(+$/<capacity-percent-used><cap-per-used-num>),
                        :mount-point(~$/<mount-point>),
            ;
    }
}

sub MAIN (
    Str     :$aix,              #= AIX server name(s) (comma separated list)
    Str     :$linux,            #= Linux server name(s) (comma separated list)
    Bool    :$ansi,             #= ANSI print
) {
    my @aix-servers;
    @aix-servers            = $aix.split(',')   if $aix;
    my @linux-servers;
    @linux-servers          = $linux.split(',') if $linux;

    my Our::Grid    $grid  .= new: :title('df Report');

    my %command;
    if @aix-servers {
        for @aix-servers -> $aix {
            %command{$aix}      = ['ssh', $aix, '/usr/bin/df', '-Pk'];
            %command{$aix}.append: @aix-filesystems;
        }
    }
    elsif @linux-servers {
        for @linux-servers -> $linux {
            %command{$linux}    = ['ssh', $linux, '/usr/bin/df', '-Pk'];
            %command{$linux}.append: @linux-filesystems;
        }
    }
    else {
        $*ERR.put: $*USAGE;
        exit 1;
    }

    my $command-manager = Async::Command::Multi.new(:%command, :2time-out, :4batch);
    $command-manager.sow;
    my %results = $command-manager.reap;
    for %results.keys.sort -> $server {
        df-Pk-grammar.parse(%results{$server}.stdout-results, :actions(df-Pk-actions.new(:$server)));
    }
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('System'),       :bold)), :0col);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('Filesystem'),   :bold)), :1col);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('Total'),        :bold)), :2col);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('Used'),         :bold)), :3col);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('Available'),    :bold)), :4col);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('% Used'),       :bold)), :5col);
    $grid.add-cell(:cell(Our::Grid::Cell.new(:text('Mount Point'),  :bold)), :6col);
    for %server-results.keys.sort -> $server {
        for %server-results{$server}.list -> $df-record {
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($server), :bold)), :row);
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.filesystem))));
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.total-KBS),                   :justification(justify-right))));
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.used-KBs),                    :justification(justify-right))));
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.available-KBs),               :justification(justify-right))));
            if 80 <= $df-record.cap-per-used-num < 90 {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity-percent-used),   :justification(justify-right), :foreground(orange))));
            }
            elsif 90 <= $df-record.cap-per-used-num < 100 {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity-percent-used),   :justification(justify-right), :foreground(red))));
            }
            elsif $df-record.cap-per-used-num == 100 {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity-percent-used),   :justification(justify-right), :foreground(red), :blink)));
            }
            else {
                $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.capacity-percent-used),   :justification(justify-right))));
            }
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($df-record.mount-point))));
        }
    }
    if $ansi {
        $grid.ANSI-print;
    }
    else {
        $grid.TEXT-print;
    }
}

=finish
