#!/usr/bin/env raku

use Color::Names:api<2>;

# a hash of normalized color names / set ID
# with rgb values, a pretty name, and possibly color codes

.say for sort Color::Names.color-data("X11");

=finish

# you can mix sets, names are associated with the group
# they came from

.say for sort Color::Names.color-data("X11", "XKCD");


# There is a find-color routine exported you can use to search for partial
# or exact names.

use Color::Names::CSS3;
.say for sort Color::Names.color-data(<CSS3>).&find-color: <Aqua>;
# --> aqua-CSS3             => { rgb => [0 255 255], name => Aqua}
# --> aquamarine-CSS3       => { rgb => [127 255 212], name => Aquamarine}
# --> mediumaquamarine-CSS3 => { rgb => [102 205 170], name => Medium Aquamarine}


.say for sort Color::Names.color-data(<CSS3>).&find-color: <Aqua>, :exact;
# --> aqua-CSS3 => { rgb => [0 255 255], name => Aqua}

use Color::Names::X11 :colors;
say COLORS{'red-X11'};
# --> {name => Red, rgb => [255 0 0]}


# There is also an exported nearest() routine to find the nearest color to a
# given R G B triple.

my %c = Color::Names.color-data(<XKCD>);
say nearest(%c, 152, 215, 150);
# --> [hospitalgreen-XKCD => {name => Hospital Green, rgb => [155 229 170]}]
